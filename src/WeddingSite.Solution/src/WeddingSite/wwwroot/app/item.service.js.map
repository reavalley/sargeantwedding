{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","add","item","post","JSON","stringify","getRequestedOptions","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","auth_http_1","AuthHttp"],"mappings":"w/BAOAA,YAAA,WACI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA6EtB,MA3EIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GACA,KAAM,IAAIC,OAAM,kBAEpB,IAAMV,KAAML,KAAKC,QAAUa,EAC3B,OAAOd,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAACA,UAASC,SAC1BC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAc,IAAA,SAAIC,MACA,GAAIZ,KAAML,KAAKC,OAEf,OAAOD,MAAKD,KAAKmB,KAAKb,IAAKc,KAAKC,UAAUH,MAAOjB,KAAKqB,uBACjDd,IAAI,SAAAC,UAAY,MAACA,UAASC,SAC1BC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAoB,OAAA,SAAOL,MACH,GAAIZ,KAAML,KAAKC,QAAUgB,KAAKM,EAE9B,OAAOvB,MAAKD,KAAKyB,IAAInB,IAAKc,KAAKC,UAAUH,MAAOjB,KAAKqB,uBAChDd,IAAI,SAAAC,UAAY,MAACA,UAASC,SAC1BC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAuB,OAAA,SAAOX,IACH,GAAIT,KAAML,KAAKC,QAAUa,EAEzB,OAAOd,MAAKD,KAAK0B,OAAOpB,KACnBK,MAAMV,KAAKW,cAGZb,YAAAI,UAAAmB,oBAAR,WACI,MAAO,IAAIK,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKpBhC,YAAAI,UAAAS,YAAR,SAAoBoB,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMtB,OAAOsB,OAAS,iBAEtDjC,eAhFAA,YAAAsC,YADCC,OAAAC,6CAE6BC,YAAAC,iDADjB1C","file":"item.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Item} from \"./item\";\r\nimport {AuthHttp} from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    private baseUrl = \"api/items/\";\r\n\r\n    getLatest(num?: number) {\r\n        let url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        let url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?: number) {\r\n        let url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) {\r\n            throw new Error(\"id is required.\");\r\n        }\r\n        const url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => (response.json() as Item))\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    add(item: Item) {\r\n        var url = this.baseUrl;\r\n\r\n        return this.http.post(url, JSON.stringify(item), this.getRequestedOptions())\r\n            .map(response => (response.json()))\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    update(item: Item) {\r\n        var url = this.baseUrl + item.Id;\r\n\r\n        return this.http.put(url, JSON.stringify(item), this.getRequestedOptions())\r\n            .map(response => (response.json()))\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private getRequestedOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}