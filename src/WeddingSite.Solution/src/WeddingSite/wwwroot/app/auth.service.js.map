{"version":3,"sources":["auth.service.ts"],"names":["AuthService","http","this","authKey","prototype","login","username","password","_this","url","data","client_id","grant_type","scope","post","toUrlEncodedString","http_1","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","catch","err","Observable_1","Observable","throw","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","i","getItem","parse","isLoggedIn","get","add","user","update","put","__decorate","core_1","Injectable","auth_http_1","AuthHttp"],"mappings":"w/BAOAA,YAAA,WAGI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,OA2Gd,MArGIH,aAAAI,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,GAAAC,OAAAN,KACQO,IAAM,oBAENC,MACAJ,SAAUA,SACVC,SAAUA,SACVI,UAAW,cACXC,WAAY,WACZC,MAAO,+BAGX,OAAOX,MAAKD,KAAKa,KACTL,IACAP,KAAKa,mBAAmBL,MACxB,GAAIM,QAAAC,gBACAC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,yCAG3BC,IAAI,SAAAC,UACD,GAAIC,MAAOD,SAASE,MAIpB,OAHAC,SAAQC,IAAI,sDACZD,QAAQC,IAAIH,MACZf,MAAKmB,QAAQJ,MACNA,QAInBvB,YAAAI,UAAAwB,OAAA,WAAA,GAAApB,OAAAN,IACI,OAAOA,MAAKD,KAAKa,KAAK,sBAAuB,MACxCO,IAAI,SAAAC,UAED,MADAd,OAAKmB,QAAQ,OACN,IAEVE,MAAM,SAAAC,KACH,MAAOC,cAAAC,WAAWC,MAAMH,QAIpC9B,YAAAI,UAAAW,mBAAA,SAAmBL,MACf,GAAIwB,MAAO,EACX,KAAK,GAAIC,OAAOzB,MACRwB,KAAKE,SACLF,MAAQ,KAEZA,MAAQC,IAAM,IACdD,MAAQG,mBAAmB3B,KAAKyB,KAEpC,OAAOD,OAGXlC,YAAAI,UAAAuB,QAAA,SAAQJ,MAMJ,MALIA,MACAe,aAAaC,QAAQrC,KAAKC,QAASqC,KAAKC,UAAUlB,OAElDe,aAAaI,WAAWxC,KAAKC,UAE1B,GAGXH,YAAAI,UAAAuC,QAAA,WACI,GAAIC,GAAIN,aAAaO,QAAQ3C,KAAKC,QAClC,OAAIyC,GACOJ,KAAKM,MAAMF,GAEX,MAIf5C,YAAAI,UAAA2C,WAAA,WACI,MAA6C,OAAtCT,aAAaO,QAAQ3C,KAAKC,UAGrCH,YAAAI,UAAA4C,IAAA,WACI,MAAO9C,MAAKD,KAAK+C,IAAI,gBAChB3B,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAGlCxB,YAAAI,UAAA6C,IAAA,SAAIC,MACA,MAAOhD,MAAKD,KAAKa,KACT,eACA0B,KAAKC,UAAUS,MACf,GAAIlC,QAAAC,gBACAC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAG3BC,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAGlCxB,YAAAI,UAAA+C,OAAA,SAAOD,MACH,MAAOhD,MAAKD,KAAKmD,IACb,eACAZ,KAAKC,UAAUS,MACf,GAAIlC,QAAAC,gBACAC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAGvBC,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAEtCxB,eA5GAA,YAAAqD,YADCC,OAAAC,6CAI6BC,YAAAC,iDAHjBzD","file":"auth.service.js","sourcesContent":["import {Injectable, EventEmitter} from \"@angular/core\";\r\nimport {Http, Headers, Response, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {AuthHttp} from \"./auth.http\";\r\nimport {User} from \"./user\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n\r\n    constructor(private http: AuthHttp) {\r\n        \r\n    }\r\n\r\n    login(username: string, password: string): any {\r\n        var url = \"api/connect/token\";\r\n\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"WeddingSite\",\r\n            grant_type: \"password\",\r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(\r\n                url,\r\n                this.toUrlEncodedString(data),\r\n                new RequestOptions({\r\n                    headers: new Headers({\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                    })\r\n                }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log(\"The following auth JSON object has been received: \");\r\n                console.log(auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): any {\r\n        return this.http.post(\"api/Accounts/Logout\", null)\r\n            .map(response => {\r\n                this.setAuth(null);\r\n                return true;\r\n            })\r\n            .catch(err => {\r\n                return Observable.throw(err);\r\n            });\r\n    }\r\n\r\n    toUrlEncodedString(data: any) {\r\n        var body = \"\";\r\n        for (var key in data) {\r\n            if (body.length) {\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        } else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getAuth(): any {\r\n        var i = localStorage.getItem(this.authKey);\r\n        if (i) {\r\n            return JSON.parse(i);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n\r\n    get() {\r\n        return this.http.get(\"api/Accounts\")\r\n            .map(response => response.json());\r\n    }\r\n\r\n    add(user: User) {\r\n        return this.http.post(\r\n                \"api/Accounts\",\r\n                JSON.stringify(user),\r\n                new RequestOptions({\r\n                    headers: new Headers({\r\n                        \"Content-Type\": \"application/json\"\r\n                    })\r\n                }))\r\n            .map(response => response.json());\r\n    }\r\n\r\n    update(user: User) {\r\n        return this.http.put(\r\n            \"api/Accounts\",\r\n            JSON.stringify(user),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            }))\r\n            .map(response => response.json());\r\n    }\r\n}\r\n"]}