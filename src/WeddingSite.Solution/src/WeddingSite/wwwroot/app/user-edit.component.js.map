{"version":3,"sources":["user-edit.component.ts"],"names":["UserEditComponent","fb","router","activatedRoute","authService","this","title","errorMessage","isRegister","snapshot","url","path","isLoggedIn","navigate","prototype","ngOnInit","_this","userForm","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","validator","compareValidator","addControl","FormControl","find","clearValidators","setValidators","get","subscribe","user","setValue","UserName","Email","DisplayName","fc1","fc2","controls","value","compareFailed","onSubmit","event","preventDefault","add","data","error","login","err","console","log","user_1","User","passwordCurrent","update","__decorate","core_1","Component","moduleId","__moduleName","selector","templateUrl","FormBuilder","router_1","Router","ActivatedRoute","auth_service_1","AuthService"],"mappings":"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","file":"user-edit.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport {User} from \"./user\";\r\n\r\n@Component({\r\n    moduleId: __moduleName,\r\n    selector: \"user-edit\",\r\n    templateUrl: \"user-edit.component.html\"\r\n})\r\nexport class UserEditComponent {\r\n    title = \"New User Registration\";\r\n    userForm: FormGroup;\r\n    errorMessage = null;\r\n    isRegister: boolean;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private authService: AuthService) {\r\n\r\n        this.isRegister = (activatedRoute.snapshot.url[0].path === \"register\");\r\n        if ((this.isRegister && this.authService.isLoggedIn())\r\n            || (!this.isRegister && !this.authService.isLoggedIn())) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        if (!this.isRegister) {\r\n            this.title = \"Edit Account\";\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.userForm = this.fb.group(\r\n            {\r\n                username: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-zA-Z0-9]+\")\r\n                ]],\r\n                email: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9]*[a-z0-9])?\")\r\n                ]],\r\n                password: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)\r\n                ]],\r\n                passwordConfirm: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)\r\n                ]],\r\n                displayName: [\"\", null]            \r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            }\r\n        );\r\n\r\n        if (!this.isRegister) {\r\n            //add new control for current password\r\n            this.userForm.addControl(\"passwordCurrent\",new FormControl(\"\", Validators.required));\r\n\r\n            //remove required validators from password\r\n            var password = this.userForm.find(\"password\");\r\n            password.clearValidators();\r\n            password.setValidators(Validators.minLength(6));\r\n\r\n            //remove required validator from password confirm\r\n            var passwordConfirm = this.userForm.find(\"passwordConfirm\");\r\n            passwordConfirm.clearValidators();\r\n            passwordConfirm.setValidators(Validators.minLength(6));\r\n\r\n            this.authService.get().subscribe(\r\n                user => {\r\n                    this.userForm.find(\"username\")\r\n                        .setValue(user.UserName);\r\n                    this.userForm.find(\"email\")\r\n                        .setValue(user.Email);\r\n                    this.userForm.find(\"displayName\")\r\n                        .setValue(user.DisplayName);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n\r\n            if (password.value === passwordConfirm.value) {\r\n                return null;\r\n            }\r\n            return { compareFailed: true }\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        event.preventDefault();\r\n\r\n        if (this.isRegister) {\r\n            this.authService.add(this.userForm.value)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        this.errorMessage = null;\r\n                        this.authService.login(this.userForm.value.username, this.userForm.value.password)\r\n                            .subscribe((data) => {\r\n                                this.errorMessage = null;\r\n                                this.router.navigate([\"\"]);\r\n                            },\r\n                            (err) => {\r\n                                console.log(err);\r\n                                this.errorMessage = \"Warning: Username or password mismatch\";\r\n                            });\r\n                    }\r\n                    else {\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.errorMessage = err;\r\n                });\r\n        }\r\n        else {\r\n            let user = new User(\r\n                this.userForm.value.username,\r\n                this.userForm.value.passwordCurrent,\r\n                this.userForm.value.password,\r\n                this.userForm.value.email,\r\n                this.userForm.value.displayName);\r\n            this.authService.update(user)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // update successful\r\n                        this.errorMessage = null;\r\n                        this.router.navigate([\"\"]);\r\n                    } else {\r\n                        // update failure\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                });\r\n        }\r\n    }\r\n}"]}