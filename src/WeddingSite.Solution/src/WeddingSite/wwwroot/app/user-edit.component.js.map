{"version":3,"sources":["user-edit.component.ts"],"names":["UserEditComponent","fb","router","activatedRoute","authService","this","title","errorMessage","isRegister","snapshot","url","path","isLoggedIn","navigate","prototype","ngOnInit","_this","userForm","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","isSocialLogin","validator","compareValidator","addControl","FormControl","find","clearValidators","setValidators","get","subscribe","user","setValue","UserName","Email","DisplayName","IsSocialLogin","fc1","fc2","controls","value","compareFailed","onSubmit","event","preventDefault","add","data","error","login","err","console","log","user_1","User","passwordCurrent","update","__decorate","core_1","Component","moduleId","__moduleName","selector","templateUrl","FormBuilder","router_1","Router","ActivatedRoute","auth_service_1","AuthService"],"mappings":"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","file":"user-edit.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {AuthService} from \"./auth.service\";\nimport {User} from \"./model/user\";\n\n@Component({\n    moduleId: __moduleName,\n    selector: \"user-edit\",\n    templateUrl: \"user-edit.component.html\"\n})\nexport class UserEditComponent {\n    title = \"New User Registration\";\n    userForm: FormGroup;\n    errorMessage = null;\n    isRegister: boolean;\n\n    constructor(\n        private fb: FormBuilder,\n        private router: Router,\n        private activatedRoute: ActivatedRoute,\n        private authService: AuthService) {\n\n        this.isRegister = (activatedRoute.snapshot.url[0].path === \"register\");\n        if ((this.isRegister && this.authService.isLoggedIn())\n            || (!this.isRegister && !this.authService.isLoggedIn())) {\n            this.router.navigate([\"\"]);\n        }\n        if (!this.isRegister) {\n            this.title = \"Edit Account\";\n        }\n    }\n\n    ngOnInit() {\n        this.userForm = this.fb.group(\n            {\n                username: [\"\", [\n                    Validators.required,\n                    Validators.pattern(\"[a-zA-Z0-9]+\")\n                ]],\n                email: [\"\", [\n                    Validators.required,\n                    Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9]*[a-z0-9])?\")\n                ]],\n                password: [\"\", [\n                    Validators.required,\n                    Validators.minLength(6)\n                ]],\n                passwordConfirm: [\"\", [\n                    Validators.required,\n                    Validators.minLength(6)\n                ]],\n                displayName: [\"\", null],\n                isSocialLogin: [\"\", null]           \n            },\n            {\n                validator: this.compareValidator('password', 'passwordConfirm')\n            }\n        );\n\n        if (!this.isRegister) {\n            //add new control for current password\n            this.userForm.addControl(\"passwordCurrent\",new FormControl(\"\", Validators.required));\n\n            //remove required validators from password\n            var password = this.userForm.find(\"password\");\n            password.clearValidators();\n            password.setValidators(Validators.minLength(6));\n\n            //remove required validator from password confirm\n            var passwordConfirm = this.userForm.find(\"passwordConfirm\");\n            passwordConfirm.clearValidators();\n            passwordConfirm.setValidators(Validators.minLength(6));\n\n            this.authService.get().subscribe(\n                user => {\n                    this.userForm.find(\"username\")\n                        .setValue(user.UserName);\n                    this.userForm.find(\"email\")\n                        .setValue(user.Email);\n                    this.userForm.find(\"displayName\")\n                        .setValue(user.DisplayName);\n                    this.userForm.find(\"isSocialLogin\")\n                        .setValue(user.IsSocialLogin);\n                }\n            );\n        }\n    }\n\n    compareValidator(fc1: string, fc2: string) {\n        return (group: FormGroup): { [key: string]: any } => {\n            let password = group.controls[fc1];\n            let passwordConfirm = group.controls[fc2];\n\n            if (password.value === passwordConfirm.value) {\n                return null;\n            }\n            return { compareFailed: true }\n        }\n    }\n\n    onSubmit() {\n        event.preventDefault();\n\n        if (this.isRegister) {\n            this.authService.add(this.userForm.value)\n                .subscribe((data) => {\n                    if (data.error == null) {\n                        this.errorMessage = null;\n                        this.authService.login(this.userForm.value.username, this.userForm.value.password)\n                            .subscribe((data) => {\n                                this.errorMessage = null;\n                                this.router.navigate([\"\"]);\n                            },\n                            (err) => {\n                                console.log(err);\n                                this.errorMessage = \"Warning: Username or password mismatch\";\n                            });\n                    }\n                    else {\n                        this.errorMessage = data.error;\n                    }\n                },\n                (err) => {\n                    this.errorMessage = err;\n                });\n        }\n        else {\n            let user = new User(\n                this.userForm.value.username,\n                this.userForm.value.passwordCurrent,\n                this.userForm.value.password,\n                this.userForm.value.email,\n                this.userForm.value.displayName,\n                this.userForm.value.isSocialLogin);\n            this.authService.update(user)\n                .subscribe((data) => {\n                    if (data.error == null) {\n                        // update successful\n                        this.errorMessage = null;\n                        this.router.navigate([\"\"]);\n                    } else {\n                        // update failure\n                        this.errorMessage = data.error;\n                    }\n                },\n                (err) => {\n                    // server/connection error\n                    this.errorMessage = err;\n                });\n        }\n    }\n}"]}